Процедура ОбработкаПроведения(Отказ,Режим)
	
	//Пеня гасится только тогда, когда ЗачисленнаяСумма >= Задолженность + Пеня;
	Задолженность = ПолучитьСуммуЗадолженностиСтудента(Студент);
	Задолженность = ?(Задолженность >= 0, Задолженность, 0); 
	Пеня = ПолучитьСуммуПениСтудента(Студент);
	
	ОстатокПослеПогашенияЗадолженности = ЗачисленнаяСумма - Задолженность;
	Если Пеня > 0 И ОстатокПослеПогашенияЗадолженности >= Пеня Тогда
		ЗачисленнаяСумма = ЗачисленнаяСумма - Пеня;
	КонецЕсли;
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!

	// регистр ОстаткиНачисленийСтудентов
	Движения.ОстаткиНачисленийСтудентов.Записывать = Истина;
	Движение = Движения.ОстаткиНачисленийСтудентов.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Студент = Студент;
	Движение.Сумма = ЗачисленнаяСумма;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
	ЗаписьОперации = РегистрыСведений.РегистрОпераций.СоздатьМенеджерЗаписи();
	ЗаписьОперации.Период = Дата;
	ЗаписьОперации.ТипОперации = "Погашение оплаты";
	ЗаписьОперации.Студент = Студент;
	ЗаписьОперации.Сумма = ЗачисленнаяСумма;
	ЗаписьОперации.Записать();
	
	//Погашение пени
	Если Пеня > 0 И ОстатокПослеПогашенияЗадолженности >= Пеня тогда
		ДокументПогашенияПени = Документы.ПогашениеПениПоЗадолженности.СоздатьДокумент();
		ДокументПогашенияПени.Дата = Дата;
		ДокументПогашенияПени.Студент = Студент;
		ДокументПогашенияПени.ПогашеннаяПеня = Пеня;
		ДокументПогашенияПени.Записать(РежимЗаписиДокумента.Проведение); 
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСуммуПениСтудента(Студент)
	КритерийСтудент = Новый Структура("Студент", Студент);
	СуммаПениСтудента = РегистрыНакопления.ОстаткиПениСтудентов
	.Остатки();
	СуммаПениСтудента = СуммаПениСтудента.НайтиСтроки(КритерийСтудент);
	Возврат ?(СуммаПениСтудента.Количество() > 0, 
		СуммаПениСтудента[0][1], 
		0);
КонецФункции

Функция ПолучитьСуммуЗадолженностиСтудента(Студент)
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	КритерийСтудент = Новый Структура("Студент", Студент);
	
	//получаем текущие начисления студента
	ТекущиеНачисленияСтудента = РегистрыНакопления.ОстаткиНачисленийСтудентов
		.Остатки().НайтиСтроки(КритерийСтудент);
	ТекущиеНачисления = ?(ТекущиеНачисленияСтудента.Количество() > 0, 
		ТекущиеНачисленияСтудента[0][1], 
		0);
	
	//Получаем сумму начислений, срок оплаты которых ещё не прошёл
	ЗапросБудущихНачислений = Новый Запрос;
	ЗапросБудущихНачислений.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса); 
	ЗапросБудущихНачислений.Текст = "
		|SELECT
		|	Студент,
		|	SUM(СуммаЗачисленнойОплаты) AS СуммаБудущихНачислений
		|FROM Документ.НачислениеОплатыЗаОбучение
		|WHERE ДатаОплаты > &ТекущаяДата
		|GROUP BY Студент
		|";
	БудущиеНачисленияСтудентов = ЗапросБудущихНачислений.Выполнить().Выгрузить();
	БудушиеНачисленияСтудента = БудущиеНачисленияСтудентов.НайтиСтроки(КритерийСтудент);
	БудущиеНачисления = ?(БудушиеНачисленияСтудента.Количество() > 0, 
		БудушиеНачисленияСтудента[0][1], 
		0);
	Задолженность = ТекущиеНачисления - БудущиеНачисления;
	Возврат Задолженность;
КонецФункции